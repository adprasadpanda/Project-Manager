// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project_Manager.dbcontext;

#nullable disable

namespace Project_Manager.Migrations
{
    [DbContext(typeof(ProjectsContext))]
    partial class ProjectsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Project_Manager.models.Issues", b =>
                {
                    b.Property<Guid>("issueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ProjectsprojectId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("UsersuserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("UsersuserId1")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("assignee")
                        .HasColumnType("char(36)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("projectId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("reporter")
                        .HasColumnType("char(36)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("issueId");

                    b.HasIndex("ProjectsprojectId");

                    b.HasIndex("UsersuserId");

                    b.HasIndex("UsersuserId1");

                    b.ToTable("Issues");
                });

            modelBuilder.Entity("Project_Manager.models.Projects", b =>
                {
                    b.Property<Guid>("projectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("creator")
                        .HasColumnType("char(36)");

                    b.Property<string>("projectDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("projectId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Project_Manager.models.Users", b =>
                {
                    b.Property<Guid>("userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("emailId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("userId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Project_Manager.models.Issues", b =>
                {
                    b.HasOne("Project_Manager.models.Projects", null)
                        .WithMany("listOfIssues")
                        .HasForeignKey("ProjectsprojectId");

                    b.HasOne("Project_Manager.models.Users", null)
                        .WithMany("assignedIssues")
                        .HasForeignKey("UsersuserId");

                    b.HasOne("Project_Manager.models.Users", null)
                        .WithMany("reporterOfIssues")
                        .HasForeignKey("UsersuserId1");
                });

            modelBuilder.Entity("Project_Manager.models.Projects", b =>
                {
                    b.Navigation("listOfIssues");
                });

            modelBuilder.Entity("Project_Manager.models.Users", b =>
                {
                    b.Navigation("assignedIssues");

                    b.Navigation("reporterOfIssues");
                });
#pragma warning restore 612, 618
        }
    }
}
